Different types of Objects and Uses in Cloud HANA DB
•	Package
It is collection of below objects in a single repository.

•	Schema(.hdbschema)
It is base of table definition and related table objects without schema we can not create table/view.
•	HANA DB Table(.hdbtable/.hdbdd)
In order to create table in HANA DB we need Schema Name, Type of Table(Columns Store/Row Store, Table Columns And Table Primary Keys)
// 1.Schema Name
table.schemaName = "ZCAH";

// 2.Table Type
table.tableType = COLUMNSTORE;


// 3.Table columns
       table.columns = [
{name = "Catalogue_Name";   sqlType = NVARCHAR; length = 50;},
{name = "Event_ID";   sqlType = INTEGER;},
{name = "Action_ID"; sqlType = NVARCHAR; length = 250;},
{name = "Process_ID";   sqlType = NVARCHAR; length = 50;},
{name = "Catalogue_Type"; sqlType = NVARCHAR; length = 50;},
{name = "Lead_Catalogue"; sqlType = NVARCHAR; length = 50;},
{name = "Action";   sqlType = NVARCHAR; length = 50;},
{name = "User"; sqlType = NVARCHAR; length = 51;},
{name = "Create_Date"; sqlType = TIMESTAMP;},
{name = "Update_Date";   sqlType = TIMESTAMP;},
{name = "Created_By"; sqlType = NVARCHAR; length = 30;},
{name = "Updated_By"; sqlType = NVARCHAR; length = 30;},
{name = "Component"; sqlType = NVARCHAR; length = 50;},
{name = "TempVersion"; sqlType = NVARCHAR; length = 10;}
 ];
// Table primary keys
table.primaryKey.pkcolumns = ["Catalogue_Name","Catalogue_Type","Event_ID"];
•	Sequence
It acts as Number Range like we are defining in ABAP. It generates next number. 
schema= "ZCAH";
start_with= 1100001000;
maxvalue= 1999999999;
nomaxvalue=false;
minvalue= 1;
nominvalue=true;
cycles= false;
depends_on_table= "ZCAH.Schema::FlatTableValueGrp" ;
•	TableType(.hdbtabletype)-It acts as a return type for result set. 
TYPE "ZCAH"."ZCAH.Schema::Reference_Procedure"
AS TABLE
(
"id" NVARCHAR(100),
"TableName" NVARCHAR(50),
"Parameter1" NVARCHAR(150),
"Parameter2" NVARCHAR(150),
"Parameter3" NVARCHAR(150),
"Parameter4" NVARCHAR(150),
"Parameter5" NVARCHAR(150),
"Parameter6" NVARCHAR(150),
"Parameter7" NVARCHAR(150),
"Parameter8" NVARCHAR(150),
"Parameter9" NVARCHAR(150),
"Parameter10" NVARCHAR(150),
"Parameter11" NVARCHAR(150),
"Parameter12" NVARCHAR(150),
"Parameter13" NVARCHAR(150),
"Parameter14" NVARCHAR(150),
"Parameter15" NVARCHAR(150),


  PRIMARY KEY ("id")) 
;
•	View(Calculation View, Attribute View, Analytical View)
Calculation view is created over HDB table.
Example;


•	Procedure(.hdbprocedure)
Procedure having I/P and O/P Parameters which is used to perform Insert/Update/Delete operations over HANA DB.

Syntax:
PROCEDURE "ZCAH"."ZCAH.Procedure::createFlatValues" ( 
		IN newtab "ZCAH"."ZCAH.Schema::Flattable_Procedure",
 
		OUT outtab "ZCAH"."ZCAH.Schema::Reference_Error"
		
    )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
AS
BEGIN
DECLARE LV_TableID STRING;
--DECLARE LV_RecordID STRING;
DECLARE LV_Parameter1 STRING;
DECLARE LV_Parameter2 STRING;
DECLARE LV_Parameter3 STRING;
DECLARE LV_Parameter4 STRING;
DECLARE LV_Parameter5 STRING;
DECLARE LV_Parameter6 STRING;
DECLARE LV_Parameter7 STRING;
DECLARE LV_Parameter8 STRING;
DECLARE LV_Parameter9 STRING;
DECLARE LV_Parameter10 STRING;
DECLARE LV_Parameter11 STRING;
DECLARE LV_Parameter12 STRING;
DECLARE LV_Parameter13 STRING;
DECLARE LV_Parameter14 STRING;
DECLARE LV_Parameter15 STRING;


	SELECT "TableID",
	       --"RecordID",
"Parameter1",
"Parameter2",
"Parameter3",
"Parameter4",
"Parameter5",
"Parameter6",
"Parameter7",
"Parameter8",
"Parameter9",
"Parameter10",
"Parameter11",
"Parameter12",
"Parameter13",
"Parameter14",
"Parameter15"
		INTO LV_TableID,
--LV_RecordID
LV_Parameter1,
LV_Parameter2,
LV_Parameter3,
LV_Parameter4,
LV_Parameter5,
LV_Parameter6,
LV_Parameter7,
LV_Parameter8,
LV_Parameter9,
LV_Parameter10,
LV_Parameter11,
LV_Parameter12,
LV_Parameter13,
LV_Parameter14,
LV_Parameter15

FROM :newtab;

	IF (:LV_TableID = '') THEN
    	outtab = SELECT 500 AS http_status_code, 
					'Enter Valid PARAM ID' AS error_message, 
					'Enter Valid PARAM SET' AS detail
				FROM dummy;	
	ELSE
		INSERT INTO  "ZCAH.Schema::FlatTableValueGrp" VALUES(LV_TableID,"ZCAH.Schema.Sequence::seqCAHFlatRecordID".NEXTVAL,LV_Parameter1,LV_Parameter2,LV_Parameter3,LV_Parameter4,LV_Parameter5,LV_Parameter6,LV_Parameter7,LV_Parameter8,LV_Parameter9,LV_Parameter10,LV_Parameter11,LV_Parameter12,LV_Parameter13,LV_Parameter14,LV_Parameter15); 
	  
	END IF;
END;
•	Services(.xsodata)
It will expose services for DB operation from external url and It will be consumed outside(SAPUI5/FIORI/Third Party Application). 
               Syntax:
               service {  
	"_SYS_BIC"."ZCAH.Schema/CA_Excel_Catalogues" as "CatalogueHeader" 
	    keys ("Catalogue_Name", "TempVersion")
	  	navigates ("Catalogues_To_Catalogue_Items" as "CatalogueItems")
	    create using "ZCAH.Services:Catalogues.xsjslib::fnHandleXSODataPost"
	    update using "ZCAH.Services:Catalogues.xsjslib::fnHandleXSODataPut"
	    delete using "ZCAH.Services:Catalogues.xsjslib::fnHandleXSODataDelete";   
	     }               

•	xsjslib functions
$.import("ZCAH.Services", "Session");
$.import("ZCAH.Services", "Utils");

var SESSIONINFO = $.ZCAH.Services.Session;
var UTILS = $.ZCAH.Services.Utils;

var sql = null;
var pstmt = null;
var input = null;

var schema = "\"ZCAH\"";
var entity = schema + ".\"ZCAH.Schema::Catalogue\" ";
var entityLogging = schema + ".\"ZCAH.Schema::Catalogues_Logging\" ";
var entityAuditTrailCatalogueH = schema + ".\"ZCAH.Schema::AuditTrail_CatalogueH\" ";

var entityDatalog = schema + ".\"ZCAH.ZDatalog.Schema::Catalogue_HistData\" ";

function getLocalVersion(model) {
    return (UTILS.isNotBlank(model) && (UTILS.returnFieldOrEmpty(model).toLowerCase() === "local")) ? "FALSE" : "TRUE";
}

function getProcessStatus() {
    return "Pending for Approval";
}

function insertCatalogData(conn, data) {
    try {
        
            sql = "INSERT INTO " + entity + " (" +
            "\"Active\"," +
           // "\"Audit_Trail\"," +
            "\"Category_Manager\"," +
            "\"Create_Date\"," +
            "\"Created_By\"," +
            "\"Catalogue_Name\"," +
            "\"GNP_Shopping\"," +
            "\"Items\"," +
            "\"JobNo\"," +
            "\"Locked\"," +
            "\"Model\"," +
            "\"Process_Status\"," +
            "\"SRM_Shopping\"," +
            "\"Status\"," +
            "\"Supplier\"," +
            "\"Type\"," +
            "\"Update_Date\"," +
            "\"Updated_By\"," +
            "\"Valid_From\"," +
            "\"Valid_To\"," +
            "\"Version\"," +
            "\"Description\"," +
            "\"Groups\"," +
            "\"TempVersion\"," +
            "\"Category_ManagerID\"" +
            ") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"; //25
            pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, UTILS.returnFieldOrEmpty(data.Active));
            // pstmt.setString(2, UTILS.returnFieldOrEmpty(data.Audit_Trail));
            pstmt.setString(3, UTILS.returnFieldOrEmpty(data.Category_Manager));
            pstmt.setDate(4, new Date()); 
            pstmt.setString(5, UTILS.returnFieldOrEmpty(data.Created_By)); //created_by
            pstmt.setString(6, UTILS.returnFieldOrEmpty(data.Catalogue_Name)); // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt.setString(7, UTILS.returnFieldOrEmpty(data.GNP_Shopping));
            pstmt.setInteger(8, 0);
            pstmt.setString(9, UTILS.returnFieldOrEmpty(data.JobNo));
            pstmt.setString(10, UTILS.returnFieldOrEmpty(data.Locked));
            pstmt.setString(11, UTILS.returnFieldOrEmpty(data.Business_Model.split("+")[0]));
            //pstmt.setString(12, getProcessStatus());
            pstmt.setString(12, UTILS.returnFieldOrEmpty(data.Process_Status));
            pstmt.setString(13, UTILS.returnFieldOrEmpty(data.SRM_Shopping)); 
            pstmt.setString(14, UTILS.returnFieldOrEmpty(data.Status));
            //pstmt.setString(14, UTILS.returnFieldOrEmpty(data.Process_Status));
            pstmt.setString(15, UTILS.returnFieldOrEmpty(data.EVO_Vendor_No));
            pstmt.setString(16, UTILS.returnFieldOrEmpty(data.Catalogue_Type));
            pstmt.setDate(17, new Date()); 
            pstmt.setString(18, UTILS.returnFieldOrEmpty(data.Updated_By)); //updated_by
            pstmt.setDate(19, UTILS.returnFormattedCatalogueDate(data.Valid_From));
            pstmt.setDate(20, UTILS.returnFormattedCatalogueDate(data.Valid_To));
            pstmt.setString(21, UTILS.returnFieldOrEmpty(data.Version));
            pstmt.setString(22, UTILS.returnFieldOrEmpty(data.Catalogue_Description)); // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt.setString(23, UTILS.returnFieldOrEmpty(data.Catalogue_Group));
            //pstmt.setString(24, getLocalVersion(data.Business_Model)); //TempVersion
            pstmt.setString(24, UTILS.returnFieldOrEmpty(data.TempVersion)); //TempVersion
            pstmt.setString(25, UTILS.returnFieldOrEmpty(data.Category_ManagerID)); //TempVersion
            pstmt.execute();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}

function insertCatalogLogging(conn, data) {
    try {
        
            sql = "INSERT INTO " + entityLogging + " (" +
            "\"Catalogue_Name\"," +
            "\"Action_ID\"," +
            "\"Process_ID\"," +
            "\"Catalogue_Type\"," +
            "\"Lead_Catalogue\"," +
            "\"Action\"," +
            "\"User\"," +
            "\"Create_Date\"," +
            "\"Update_Date\"," +
            "\"Created_By\"," +
            "\"Updated_By\"," +
            "\"Component\"" +
            "\"TempVersion\"" +
            ") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)"; //13
            pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, UTILS.returnFieldOrEmpty(data.Catalogue_Name));
            pstmt.setString(2, "");
            pstmt.setString(3, "");
            pstmt.setString(4, UTILS.returnFieldOrEmpty(data.Catalogue_Type));
            pstmt.setString(5, "");
            pstmt.setString(6, UTILS.returnFieldOrEmpty(data.Process_Status));
            pstmt.setString(7, "");
            pstmt.setDate(8, new Date());
            pstmt.setDate(9, new Date());
            pstmt.setString(10, UTILS.returnFieldOrEmpty(data.Created_By));
            pstmt.setString(11, UTILS.returnFieldOrEmpty(data.Updated_By)); 
            pstmt.setString(12, "");
            pstmt.setString(13, UTILS.returnFieldOrEmpty(data.TempVersion));
            
            pstmt.execute();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}

function upsertCatalogLogging(conn, data, dataevent, dDate) {
    try {
        
            sql = "UPSERT " + entityLogging + " (" +
            "\"Catalogue_Name\"," +
            "\"Event_ID\"," +
            "\"Action_ID\"," +
            "\"Process_ID\"," +
            "\"Catalogue_Type\"," +
            "\"Lead_Catalogue\"," +
            "\"Action\"," +
            "\"User\"," +
            "\"Create_Date\"," +
            "\"Update_Date\"," +
            "\"Created_By\"," +
            "\"Updated_By\"," +
            "\"Component\"," +
            "\"TempVersion\"" +
            ") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)" +
            " WITH PRIMARY KEY"; //13
            pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, UTILS.returnFieldOrEmpty(data.Catalogue_Name));
            pstmt.setInteger(2, dataevent);
            pstmt.setString(3, "");
            pstmt.setString(4, "");
            pstmt.setString(5, UTILS.returnFieldOrEmpty(data.Catalogue_Type));
            pstmt.setString(6, "");
            pstmt.setString(7, UTILS.returnFieldOrEmpty(data.Status));
            pstmt.setString(8, "");
            pstmt.setTimestamp(9, dDate);
            pstmt.setTimestamp(10, new Date());
            pstmt.setString(11, UTILS.returnFieldOrEmpty(data.Created_By));
            pstmt.setString(12, UTILS.returnFieldOrEmpty(data.Updated_By)); 
            pstmt.setString(13, "");
            pstmt.setString(14, UTILS.returnFieldOrEmpty(data.TempVersion));
            
            pstmt.execute();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}

/*function updateCatalogLogging(conn, data, keys) {
    try {
        
            sql = "UPDATE " + entityLogging + " SET " +
            //"\"Catalogue_Name\" = '" + UTILS.returnFieldOrEmpty(data.Catalogue_Name) + "', " +
            "\"Event_ID\" = '" + UTILS.returnFieldOrEmpty(data.Event_ID) + "', " +
            "\"Action_ID\" = '" + UTILS.returnFieldOrEmpty(data.Action_ID) + "', " +
            //"\"Create_Date\" = '" + UTILS.returnFieldOrNullDate(data.Create_Date) + "', " +
            "\"Process_ID\" = '" + UTILS.returnFieldOrEmpty(data.Process_ID) + "', " +
            "\"Catalogue_Type\" = '" + UTILS.returnFieldOrEmpty(data.Catalogue_Type) + "', " + // NAME IS DESCRIPTION AND VICE-VERSA
            "\"Lead_Catalogue\" = '" + UTILS.returnFieldOrEmpty(data.Lead_Catalogue) + "', " +
            "\"Action\" = '" + UTILS.returnFieldOrNullInteger(data.Action) + "', " +
            "\"User\" = '" + UTILS.returnFieldOrEmpty(data.User) + "', " +
            "\"Create_Date\" = '" + UTILS.returnFieldOrEmpty(data.Create_Date) + "', " +
            "\"Update_Date\" = '" + new Date() + "', " +
            "\"Created_By\" = '" + UTILS.returnFieldOrEmpty(data.Created_By) + "', " +
            "\"Updated_By\" = '" + UTILS.returnFieldOrEmpty(data.Updated_By) + "', " +
            "\"Component\" = '" + UTILS.returnFieldOrEmpty(data.TempVersion) + "'" +
            " WHERE \"Catalogue_Name\" = '" + keys.Catalogue_Name + "'";
            pstmt = conn.prepareStatement(sql);
            
            pstmt.executeUpdate();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}*/

function upsertCatalogData(conn, data, dDate) {
    try {
        
            sql = "UPSERT " + entity + " (" +
            "\"Active\"," +
            //"\"Audit_Trail\"," +
            "\"Category_Manager\"," +
            "\"Create_Date\"," +
            "\"Created_By\"," +
            "\"Catalogue_Name\"," +
            "\"GNP_Shopping\"," +
            "\"Items\"," +
            "\"JobNo\"," +
            "\"Locked\"," +
            "\"Model\"," +
            "\"Process_Status\"," +
            "\"SRM_Shopping\"," +
            "\"Status\"," +
            "\"Supplier\"," +
            "\"Type\"," +
            "\"Update_Date\"," +
            "\"Updated_By\"," +
            "\"Valid_From\"," +
            "\"Valid_To\"," +
            "\"Version\"," +
            "\"Description\"," +
            "\"Groups\"," +
            "\"TempVersion\"," +
            "\"Category_ManagerID\"" +
            ") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)" +
            " WITH PRIMARY KEY";
            pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, UTILS.returnFieldOrEmpty(data.Active));
            //pstmt.setString(2, UTILS.returnFieldOrEmpty(data.Audit_Trail));
            pstmt.setString(2, UTILS.returnFieldOrEmpty(data.Category_Manager));
            pstmt.setTimestamp(3, dDate);
            pstmt.setString(4, UTILS.returnFieldOrEmpty(data.Created_By)); //created_by
            pstmt.setString(5, UTILS.returnFieldOrEmpty(data.Catalogue_Name)); // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt.setString(6, UTILS.returnFieldOrEmpty(data.GNP_Shopping));
            pstmt.setInteger(7, 0);
            pstmt.setString(8, UTILS.returnFieldOrEmpty(data.JobNo));
            pstmt.setString(9, UTILS.returnFieldOrEmpty(data.Locked));
            pstmt.setString(10, UTILS.returnFieldOrEmpty(data.Business_Model.split("+")[0]));
            //pstmt.setString(12, getProcessStatus());
            pstmt.setString(11, UTILS.returnFieldOrEmpty(data.Process_Status));
            pstmt.setString(12, UTILS.returnFieldOrEmpty(data.SRM_Shopping)); 
            pstmt.setString(13, UTILS.returnFieldOrEmpty(data.Status));
            //pstmt.setString(14, UTILS.returnFieldOrEmpty(data.Process_Status));
            pstmt.setString(14, UTILS.returnFieldOrEmpty(data.EVO_Vendor_No));
            pstmt.setString(15, UTILS.returnFieldOrEmpty(data.Catalogue_Type));
            pstmt.setTimestamp(16, new Date()); 
            pstmt.setString(17, UTILS.returnFieldOrEmpty(data.Updated_By)); //updated_by
            pstmt.setDate(18, UTILS.returnFormattedCatalogueDate(data.Valid_From));
            pstmt.setDate(19, UTILS.returnFormattedCatalogueDate(data.Valid_To));
            pstmt.setString(20, UTILS.returnFieldOrEmpty(data.Version));
            pstmt.setString(21, UTILS.returnFieldOrEmpty(data.Catalogue_Description)); // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt.setString(22, UTILS.returnFieldOrEmpty(data.Catalogue_Group));
            //pstmt.setString(24, getLocalVersion(data.Business_Model)); //TempVersion
            pstmt.setString(23, UTILS.returnFieldOrEmpty(data.TempVersion)); //TempVersion
            pstmt.setString(24, UTILS.returnFieldOrEmpty(data.Category_ManagerID));
            
            pstmt.execute();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}

function upsertCatalogDatalogTable(conn, data, dDate,trackid) {
    try {
        
            sql = "INSERT INTO " + entityDatalog + " (" +
            "\"Active\"," +
            "\"Category_Manager\"," +
            "\"Create_Date\"," +
            "\"Created_By\"," +
            "\"Catalogue_Name\"," +
            "\"GNP_Shopping\"," +
            "\"Items\"," +
            "\"JobNo\"," +
            "\"Locked\"," +
            "\"Model\"," +
            "\"Process_Status\"," +
            "\"SRM_Shopping\"," +
            "\"Status\"," +
            "\"Supplier\"," +
            "\"Type\"," +
            "\"Update_Date\"," +
            "\"Updated_By\"," +
            "\"Valid_From\"," +
            "\"Valid_To\"," +
            "\"Version\"," +
            "\"Description\"," +
            "\"Groups\"," +
            "\"TempVersion\"," +
            "\"Category_ManagerID\"," +
            "\"TrackID\"" +
            ") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, UTILS.returnFieldOrEmpty(data.Active));
            pstmt.setString(2, UTILS.returnFieldOrEmpty(data.Category_Manager));
            pstmt.setTimestamp(3, dDate);
            pstmt.setString(4, UTILS.returnFieldOrEmpty(data.Created_By)); //created_by
            pstmt.setString(5, UTILS.returnFieldOrEmpty(data.Catalogue_Name)); // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt.setString(6, UTILS.returnFieldOrEmpty(data.GNP_Shopping));
            pstmt.setInteger(7, 0);
            pstmt.setString(8, UTILS.returnFieldOrEmpty(data.JobNo));
            pstmt.setString(9, UTILS.returnFieldOrEmpty(data.Locked));
            pstmt.setString(10, UTILS.returnFieldOrEmpty(data.Business_Model.split("+")[0]));
            pstmt.setString(11, UTILS.returnFieldOrEmpty(data.Process_Status));
            pstmt.setString(12, UTILS.returnFieldOrEmpty(data.SRM_Shopping)); 
            pstmt.setString(13, UTILS.returnFieldOrEmpty(data.Status));
            pstmt.setString(14, UTILS.returnFieldOrEmpty(data.EVO_Vendor_No));
            pstmt.setString(15, UTILS.returnFieldOrEmpty(data.Catalogue_Type));
            pstmt.setTimestamp(16, new Date()); 
            pstmt.setString(17, UTILS.returnFieldOrEmpty(data.Updated_By)); //updated_by
            pstmt.setDate(18, UTILS.returnFormattedCatalogueDate(data.Valid_From));
            pstmt.setDate(19, UTILS.returnFormattedCatalogueDate(data.Valid_To));
            pstmt.setString(20, UTILS.returnFieldOrEmpty(data.Version));
            pstmt.setString(21, UTILS.returnFieldOrEmpty(data.Catalogue_Description)); // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt.setString(22, UTILS.returnFieldOrEmpty(data.Catalogue_Group));
            pstmt.setString(23, UTILS.returnFieldOrEmpty(data.TempVersion)); //TempVersion
            pstmt.setString(24, UTILS.returnFieldOrEmpty(data.Category_ManagerID));
            pstmt.setString(25, data.Business_Model.split("+")[1]);
            
            pstmt.execute();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
    
}

function getTrackID(){
    var conn02 = $.db.getConnection();
 	var query = 'SELECT "ZCAH.ZDatalog.Sequence::seqCAHDataLogTrackID".NEXTVAL as "TrackID" from Dummy';
		var pstmt = conn02.prepareStatement(query);
	var	rs = pstmt.executeQuery();
	
		while (rs.next()) {
			var trackID = rs.getString(1);
		}   
		
		return trackID;
    
}

function updateCatalogData(conn, data, keys) {
    try {
          
            sql = "UPDATE " + entity + " SET " +
            "\"Active\" = '" + UTILS.returnFieldOrEmpty(data.Active) + "', " +
           // "\"Audit_Trail\" = '" + UTILS.returnFieldOrEmpty(data.Audit_Trail) + "', " +
            "\"Category_Manager\" = '" + UTILS.returnFieldOrEmpty(data.Category_Manager) + "', " +
            "\"Created_By\" = '" + UTILS.returnFieldOrEmpty(data.Created_By) + "', " +
            "\"Description\" = '" + UTILS.returnFieldOrEmpty(data.Catalogue_Description) + "', " + // NAME IS DESCRIPTION AND VICE-VERSA
            "\"GNP_Shopping\" = '" + UTILS.returnFieldOrEmpty(data.GNP_Shopping) + "', " +
            "\"Items\" = '" + UTILS.returnFieldOrNullInteger(data.Items) + "', " +
            "\"JobNo\" = '" + UTILS.returnFieldOrEmpty(data.JobNo) + "', " +
            "\"Locked\" = '" + UTILS.returnFieldOrEmpty(data.Locked) + "', " +
            "\"Model\" = '" + UTILS.returnFieldOrEmpty(data.Business_Model) + "', " +
            "\"Process_Status\" = '" + UTILS.returnFieldOrEmpty(data.Process_Status) + "', " +
            "\"SRM_Shopping\" = '" + UTILS.returnFieldOrEmpty(data.SRM_Shopping) + "', " +
            "\"Status\" = '" + UTILS.returnFieldOrEmpty(data.Status) + "', " +
            "\"Supplier\" = '" + UTILS.returnFieldOrEmpty(data.EVO_Vendor_No) + "', " +
            "\"Update_Date\" = CURRENT_TIMESTAMP," +
            "\"Updated_By\" = '" + UTILS.returnFieldOrEmpty(data.Updated_By) + "', " +
            "\"Valid_From\" = '" + UTILS.returnFormattedDate(data.Valid_From) + "', " +
            "\"Valid_To\" = '" + UTILS.returnFormattedDate(data.Valid_To) + "', " +
            "\"Version\" = '" + UTILS.returnFieldOrEmpty(data.Version) + "', " +
            "\"Groups\" = '" + UTILS.returnFieldOrEmpty(data.Catalogue_Group) + "'" +
            " WHERE \"Catalogue_Name\" = '" + keys.Catalogue_Name + 
            "' AND \"Type\" = '" + keys.Catalogue_Type + 
            "' AND \"TempVersion\" = '" + keys.TempVersion + "'"; // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt = conn.prepareStatement(sql);
            
            pstmt.executeUpdate();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}

function updateCatalogDataApp(conn, data, keys, originalData) {
    try {
          
            sql = "UPDATE " + entity + " SET " +
            "\"Active\" = '" + UTILS.ifNull(data.Active, originalData[0].Active) + "', " +
           // "\"Audit_Trail\" = '" + UTILS.returnFieldOrEmpty(data.Audit_Trail) + "', " +
            "\"Category_Manager\" = '" + UTILS.ifNull(data.Category_Manager, originalData[0].Category_Manager) + "', " +
            "\"Created_By\" = '" + UTILS.ifNull(data.Created_By, originalData[0].Created_By) + "', " +
            "\"Description\" = '" + UTILS.ifNull(data.Catalogue_Description, originalData[0].Catalogue_Description) + "', " + // NAME IS DESCRIPTION AND VICE-VERSA
            "\"GNP_Shopping\" = '" + UTILS.ifNull(data.GNP_Shopping,originalData[0].GNP_Shopping) + "', " +
            "\"Items\" = '" + UTILS.ifNull(UTILS.returnFieldOrNullInteger(data.Items), originalData[0].Items) + "', " +
            "\"JobNo\" = '" + UTILS.ifNull(data.JobNo, originalData[0].JobNo) + "', " +
            "\"Locked\" = '" + UTILS.ifNull(data.Locked, originalData[0].Locked) + "', " +
            "\"Model\" = '" + UTILS.ifNull(data.Business_Model, originalData[0].Business_Model) + "', " +
            "\"Process_Status\" = '" + UTILS.ifNull(data.Process_Status, originalData[0].Process_Status) + "', " +
            "\"SRM_Shopping\" = '" + UTILS.ifNull(data.SRM_Shopping, originalData[0].SRM_Shopping) + "', " +
            "\"Status\" = '" + UTILS.ifNull(data.Status, originalData[0].Status) + "', " +
            "\"Supplier\" = '" + UTILS.ifNull(data.EVO_Vendor_No, originalData[0].EVO_Vendor_No) + "', " +
            "\"Update_Date\" = CURRENT_TIMESTAMP," +
            "\"Updated_By\" = '" + UTILS.returnFieldOrEmpty(data.Updated_By) + "', " +
            "\"Valid_From\" = '" + UTILS.ifNull(UTILS.returnFormattedDate(data.Valid_From),originalData[0].Valid_From) + "', " +
            "\"Valid_To\" = '" + UTILS.ifNull(UTILS.returnFormattedDate(data.Valid_To), originalData[0].Valid_To) + "', " +
            "\"Version\" = '" + UTILS.ifNull(data.Version, originalData[0].Version) + "', " +
            "\"Groups\" = '" + UTILS.ifNull(data.Catalogue_Group, originalData[0].Catalogue_Group) + "'" +
            " WHERE \"Catalogue_Name\" = '" + keys.Catalogue_Name + 
            "' AND \"Type\" = '" + keys.Catalogue_Type + 
            "' AND \"TempVersion\" = '" + keys.TempVersion + "'"; // NAME IS DESCRIPTION AND VICE-VERSA
            pstmt = conn.prepareStatement(sql);
            
            pstmt.executeUpdate();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}

function getCatalogueData(keys){
    let conn = $.db.getConnection();
    let pstmtmat = null;
    let resArray = [];
  
    
    try { 
        let sqlMaterial = "SELECT \
            \"Active\", \
            \"Category_Manager\", \
            \"Created_By\", \
            \"Description\", \
            \"GNP_Shopping\", \
            \"Items\", \
            \"JobNo\", \
            \"Locked\", \
            \"Model\", \
            \"Process_Status\", \
            \"SRM_Shopping\", \
            \"Status\", \
            \"Supplier\", \
            \"Valid_From\", \
            \"Valid_To\", \
            \"Version\", \
            \"Groups\""
            + " FROM " + entity 
            + " WHERE \"Catalogue_Name\" = '" + keys.Catalogue_Name + 
            "' AND \"Type\" = '" + keys.Catalogue_Type + 
            "' AND \"TempVersion\" = '" + keys.TempVersion + "'"; // NAME IS DESCRIPTION AND VICE-VERSA
        
        pstmtmat = conn.prepareStatement(sqlMaterial);
        pstmtmat.execute();

        let rs = pstmtmat.getResultSet();  
        while (rs.next()) {
            let resObj = {};
            resObj.Active = rs.getString(1);
            resObj.Category_Manager = rs.getString(2);
            resObj.Created_By = rs.getString(3);
            resObj.Catalogue_Description = rs.getString(4).replace(/'/g,"''");
            resObj.GNP_Shopping = rs.getString(5);
            resObj.Items = rs.getString(6);
            resObj.JobNo = rs.getString(7);
            resObj.Locked = rs.getString(8);
            resObj.Business_Model = rs.getString(9);
            resObj.Process_Status = rs.getString(10);
            resObj.SRM_Shopping = rs.getString(11);
            resObj.Status = rs.getString(12);
            resObj.EVO_Vendor_No = rs.getString(13);
            resObj.Valid_From = rs.getString(14);
            resObj.Valid_To = rs.getString(15);
            resObj.Version = rs.getString(16);
            resObj.Catalogue_Group = rs.getString(17);
            resArray.push(resObj);
        } 
         
         
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmtmat = UTILS.closeConnection(pstmtmat);
        conn = UTILS.closeConnection(conn);
    }
    
    return resArray;
   
   
}

function fnHandleXSODataPutApp(param) {
    var conn = param.connection;
    var afterTable = param.afterTableName;
	var beforeTable = param.beforeTableName;
	
	
	let currentstmt = conn.prepareStatement("select * from \"" + beforeTable + "\"");
	let current = SESSIONINFO.recordSetToJSON(currentstmt.executeQuery(), "data");
	currentstmt = UTILS.closeConnection(currentstmt);
	
	let currentData = current.data[0];
  	var catalogueName = currentData.Catalogue_Name.replace(/'/g,"''");
  
	let keys = {
	    'Catalogue_Name': catalogueName,
	    'Catalogue_Type': currentData.Catalogue_Type,
	    'TempVersion': currentData.TempVersion
	};
	
	pstmt = conn.prepareStatement("select * from \"" + afterTable + "\"");
	input = SESSIONINFO.recordSetToJSON(pstmt.executeQuery(), "data");
	pstmt = UTILS.closeConnection(pstmt);
    var dataItems = getCatalogueData(keys);
	
	let data = input.data[0];
    updateCatalogDataApp(conn, data, keys, dataItems);
}
function fnReadCatalogueData(catalogueName, TempVersion) {
    let conn = $.db.getConnection();
    let resArray = [];
    let logging = null;
    
    try {
        let sqllogging = "SELECT *"
            + " FROM " + entity  
            //+ " WHERE \"Catalogue_Name\" = '" + catalogueName + "' AND \"TempVersion\" = '" + TempVersion + "'";
            + " WHERE \"Catalogue_Name\" = '" + catalogueName + "'";
        
        logging = conn.prepareStatement(sqllogging);
        logging.execute();

        let rs = logging.getResultSet();  
            
        while (rs.next()) {
            let resObj = {};
            resObj.Catalogue_Name = rs.getString(5);
            resObj.Create_Date = rs.getTimestamp(3);
            resArray.push(resObj);
        } 
         
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        logging = UTILS.closeConnection(pstmt);
        conn = UTILS.closeConnection(conn);
    }
    
    return resArray;
}

function insertAuditTrailCatalogueH(conn, data, action, tempVersion) {
    try {
        
            sql = "INSERT INTO " + entityAuditTrailCatalogueH + " (" +
            "\"Catalogue_Name\"," +
            "\"Process\"," +
            "\"Type\"," +
            "\"Action\"," +
            "\"User\"," +
            "\"Date\"," +
            "\"TempVersion\"," +
            "\"Time\"" +
            ") VALUES(?,?,?,?,?,?,?,?)"; 
            pstmt = conn.prepareStatement(sql);
            
            pstmt.setString(1, UTILS.returnFieldOrEmpty(data.Catalogue_Name));
            pstmt.setString(2, "Upload");
            pstmt.setString(3, UTILS.returnFieldOrEmpty(data.Catalogue_Type));
            pstmt.setString(4, action);
            if(action === "Approved" || action === "Rejected"){
                pstmt.setString(5, UTILS.returnFieldOrEmpty(data.Category_ManagerID));
            }else{
                pstmt.setString(5, SESSIONINFO.getUserName());
            }
            
            pstmt.setTimestamp(6, new Date());
            pstmt.setString(7, tempVersion);
            pstmt.setTime(8, UTILS.getTime());
            pstmt.execute();
            
    } catch(err) {
        // error handling if necessary
		throw err; 
    }
    finally {
        pstmt = UTILS.closeConnection(pstmt);
    }
}


function validateAuditTrailService(conn, data){
    
    var action = "";
    var tempVersion = data.TempVersion;
    if(data.Status === "Released" && data.TempVersion === "FALSE" && (data.Business_Model === 'Local' || data.Catalogue_Type === 'OEM' || data.Catalogue_Type === 'ODM')){
        
        tempVersion = "FALSE";
        action = "Catalogue uploaded";
        insertAuditTrailCatalogueH(conn, data, action, tempVersion);
        action = "Completed";
        insertAuditTrailCatalogueH(conn, data, action, tempVersion);
      }
     else if(data.Status === "In Process"  && data.TempVersion === "TRUE") {
         tempVersion = "TRUE";
         action = "Catalogue uploaded";
         insertAuditTrailCatalogueH(conn, data, action, tempVersion);
         action = "Sent for approval";
         insertAuditTrailCatalogueH(conn, data, action, tempVersion);
     }else if(data.Status === "Rejected"){
         tempVersion = "FALSE";
         action = "Rejected";
         insertAuditTrailCatalogueH(conn, data, action, tempVersion);
     }else if(data.Status === "Released" && data.TempVersion === "FALSE"){
        tempVersion = "FALSE";
        action = "Approved";
        insertAuditTrailCatalogueH(conn, data, action, tempVersion);
        action = "Completed";
        insertAuditTrailCatalogueH(conn, data, action, tempVersion);
     }
    
}

function fnHandleXSODataPost(param) {
	var conn = param.connection;
	var afterTable = param.afterTableName;
	let dDate;
	let iCount;
	
	pstmt = conn.prepareStatement("select * from \"" + afterTable + "\"");
	input = SESSIONINFO.recordSetToJSON(pstmt.executeQuery(), "data");
	pstmt = UTILS.closeConnection(pstmt);
	
	let event = conn.prepareStatement("SELECT MAX(\"Event_ID\") as CountEvent" + " FROM " + entityLogging);
	event.execute();
    let dataevent = event.getResultSet();
    while (dataevent.next()) {
        iCount = dataevent.getInteger(1);
    }
    if(iCount === null){
        iCount = 0;
    }

    let data = input.data[0];
    let aData = fnReadCatalogueData(data.Catalogue_Name, data.TempVersion);
    if(aData.length === 0){
        dDate = new Date();
    }else{
        dDate = aData[0].Create_Date;
    
    }
   
    upsertCatalogData(conn, data, dDate);
    if(data.TempVersion === "TRUE"){
    upsertCatalogDatalogTable(conn, data, dDate);
    }
    upsertCatalogLogging(conn, data, iCount + 1, dDate);
    validateAuditTrailService(conn, data);

   
}

function fnHandleXSODataPut(param) {
    var conn = param.connection;
    var afterTable = param.afterTableName;
	var beforeTable = param.beforeTableName;
	
	
	let currentstmt = conn.prepareStatement("select * from \"" + beforeTable + "\"");
	let current = SESSIONINFO.recordSetToJSON(currentstmt.executeQuery(), "data");
	currentstmt = UTILS.closeConnection(currentstmt);
	
	let currentData = current.data[0];
	var catalogueName = currentData.Catalogue_Name.replace(/'/g,"''");
	let keys = {
	    'Catalogue_Name': catalogueName,
	    'Catalogue_Type': currentData.Catalogue_Type,
	    'TempVersion': currentData.TempVersion
	};
	
	pstmt = conn.prepareStatement("select * from \"" + afterTable + "\"");
	input = SESSIONINFO.recordSetToJSON(pstmt.executeQuery(), "data");
	pstmt = UTILS.closeConnection(pstmt);
    
	
	let data = input.data[0];
    updateCatalogData(conn, data, keys);
}


function fnHandleXSODataDelete(param){
    var conn = param.connection;
	var beforeTable = param.beforeTableName;
	var sqlDelete;
	
	let currentstmt = conn.prepareStatement("select * from \"" + beforeTable + "\"");
	let current = SESSIONINFO.recordSetToJSON(currentstmt.executeQuery(), "data");
	currentstmt = UTILS.closeConnection(currentstmt);
	
	let currentData = current.data[0];
	let keys = {
	    'Catalogue_Name': currentData.Catalogue_Name,
	    'TempVersion': currentData.TempVersion
	};
	
      sqlDelete = "DELETE FROM " + entity + " WHERE \"Catalogue_Name\" = '" + keys.Catalogue_Name + 
                    "' AND \"TempVersion\" = '" + keys.TempVersion + "'";   // NAME IS DESCRIPTION AND VICE-VERSA
    

    pstmt = conn.prepareStatement(sqlDelete);
    pstmt.execute();
    pstmt = UTILS.closeConnection(pstmt);
}
•	xsjs function
Services.xsjs file content
$.import("ZCAH.Services", "Catalogues");
var CATALOGUES = $.ZCAH.Services.Catalogues;

//$.response.contentType = "application/json";
var content = $.request.body.asString();

function fnHandlePost() {
    var data = JSON.parse(content);
    try {
        CATALOGUES.insertCatalogData(data);
        
        $.response.status = $.net.http.OK;
        $.response.setBody("OK");
            
    } catch(err) {
        $.response.status = $.net.http.INTERNAL_SERVER_ERROR;
        $.response.setBody(err.message);
    }
}

try {
    switch ($.request.method) {
        case $.net.http.POST:
            fnHandlePost();
            break;
        case $.net.http.PUT:
            //fnHandlePut();
            break;
        default:
            break;
    }
} catch (err) {
    $.response.setBody("Failed to execute action: " + err.toString());
}

Session.xsjslib file content
/*eslint no-console: 0, no-unused-vars: 0, dot-notation: 0, no-use-before-define: 0, no-redeclare: 0, camelcase:0, new-cap:0*/
/*eslint-env node, es6 */
"use strict";


function fillSessionInfo(){
	var body = "";
	body = JSON.stringify({
		"session" : [{"UserName": $.session.getUsername(), "Language": $.session.language}] 
	});
	$.response.contentType = "application/json"; 
	$.response.setBody(body);
	$.response.status = $.net.http.OK;
}
function getUserName(){
	var body = "";
	body =  $.session.getUsername();
    return body;
}
/**
@function Escape Special Characters in JSON strings
@param {string} input - Input String
@returns {string} the same string as the input but now escaped
*/
function escapeSpecialChars(input) {
	if(typeof (input) !== "undefined" && input !== null)
	{	
	return input
    .replace(/[\\]/g, "\\\\")
    .replace(/[\"]/g, "\\\"")
    .replace(/[\/]/g, "\\/")
    .replace(/[\b]/g, "\\b")
    .replace(/[\f]/g, "\\f")
    .replace(/[\n]/g, "\\n")
    .replace(/[\r]/g, "\\r")
    .replace(/[\t]/g, "\\t"); }
	else{
		
		return "";
	}
}

/**
@function Escape Special Characters in Text strings (CSV and Tab Delimited)
@param {string} input - Input String
@returns {string} the same string as the input but now escaped
*/
function escapeSpecialCharsText(input) {
	if(typeof (input) !== "undefined" && input !== null)
	{	
	input.replace(/[\"]/g, "\"\"");
	if(input.indexOf(",") >= 0 ||
	   input.indexOf("\t") >= 0 ||
	   input.indexOf(";") >= 0 ||
	   input.indexOf("\n") >= 0 ||
	   input.indexOf("\"") >= 0 )
	{input = "\""+input+"\"";}
	
	return input;
	}
	else{
		
		return "";
	}
}

/**
@function Adds minutes to a starting date object
@param {date} date - Source date object
@param {integer} minutes - number of minutes to add to the date object
@returns {date} The newly calculated date
*/
function addMinutes(date, minutes){
	return new Date(date.getTime() + minutes*60000);
}

/**
@function Current date + 24 hours
@returns {string} The newly calculated date in timestamp format
*/
function calcTomorrow(){
	return addMinutes(new Date(), (24 * 60));
}

/**
@function Returns either the current session id (xsUtilSession) or creates a new one
@returns {String} Session Id
*/
function getSessionId(){
	var sessionId = $.request.cookies.get("xsUtilSession") || null;
	if(sessionId === null){
		var conn = $.db.getConnection();
		var pstmt;
		var rs;
		var query = "select \"sessionId\".NEXTVAL from dummy";
		pstmt = conn.prepareStatement(query);
		rs = pstmt.executeQuery();
		while (rs.next()) {
			sessionId =  rs.getInteger(1).toString();
			$.response.cookies.set("xsUtilSession", sessionId);
		}
	}
	return sessionId;
}

/**
@function Converts any XSJS RecordSet object to a Text String output
@param {object} rs - XSJS Record Set object
@param {optional Boolean} bHeaders - defines if you want column headers output as well; defaults to true
@param {optional String} delimiter - supplies the delimiter used between columns; defaults to tab (\\t)
@returns {String} The text string with the contents of the record set
*/
function recordSetToText(rs,bHeaders,delimiter){
	bHeaders = typeof bHeaders !== "undefined" ? bHeaders : true;
	delimiter = typeof delimiter !== "undefined" ? delimiter : "\t"; //Default to Tab Delimited
	
	var outputString = "";
	var value = "";
	var meta = rs.getMetaData();
	var colCount = meta.getColumnCount();
	
	//Process Headers
	if(bHeaders){
		for (var i=1; i<=colCount; i++) {
			outputString += escapeSpecialCharsText(meta.getColumnLabel(i)) + delimiter;			
		}
		outputString += "\n";  //Add New Line
	}
	while (rs.next()) {
		for (var i=1; i<=colCount; i++) {
		     switch(meta.getColumnType(i)) {
		     case $.db.types.VARCHAR:
		     case $.db.types.CHAR: 
		          value += rs.getString(i);
		          break;
		     case $.db.types.NVARCHAR:
		     case $.db.types.NCHAR: 
		     case $.db.types.SHORTTEXT:
		          value += rs.getNString(i);
		          break;
		     case $.db.types.TINYINT:
		     case $.db.types.SMALLINT:
		     case $.db.types.INT:
		     case $.db.types.BIGINT:
		          value += rs.getInteger(i);
		          break;
		     case $.db.types.DOUBLE:
		          value += rs.getDouble(i);
		          break;
		     case $.db.types.DECIMAL:
		          value += rs.getDecimal(i);
		          break;
		     case $.db.types.REAL:
		          value += rs.getReal(i);
		          break;
		     case $.db.types.NCLOB:
		     case $.db.types.TEXT:
		          value += rs.getNClob(i);
		          break;
		     case $.db.types.CLOB:
		          value += rs.getClob(i);
		          break;	          
		     case $.db.types.BLOB:
		    	  value += $.util.convert.encodeBase64(rs.getBlob(i));
		          break;	          
		     case $.db.types.DATE:
		          value += rs.getDate(i);
		          break;
		     case $.db.types.TIME:
		          value += rs.getTime(i);
		          break;
		     case $.db.types.TIMESTAMP:
		          value += rs.getTimestamp(i);
		          break;
		     case $.db.types.SECONDDATE:
		          value += rs.getSeconddate(i);
		          break;
		     default:
		          value += rs.getString(i);
		     }
			   outputString += escapeSpecialCharsText(value) + delimiter;
			   value = "";
		     }
			outputString += "\n";  //Add New Line
		}
	
	
	return outputString;
}

/**
@function Converts any XSJS RecordSet object to a JSON Object
@param {object} rs - XSJS Record Set object
@param {optional String} rsName - name of the record set object in the JSON
@returns {object} JSON representation of the record set data
*/
function recordSetToJSON(rs,rsName){
	rsName = typeof rsName !== "undefined" ? rsName : "entries";
	
	var meta = rs.getMetaData();
	var colCount = meta.getColumnCount();
	var values=[];
	var table=[];
	var value="";
	while (rs.next()) {
	for (var i=1; i<=colCount; i++) {
		value = "\""+meta.getColumnLabel(i)+"\" : ";
	     switch(meta.getColumnType(i)) {
	     case $.db.types.VARCHAR:
	     case $.db.types.CHAR: 
	          value += "\""+ escapeSpecialChars(rs.getString(i))+"\"";
	          break;
	     case $.db.types.NVARCHAR:
	     case $.db.types.NCHAR: 
	     case $.db.types.SHORTTEXT:
	          value += "\""+escapeSpecialChars(rs.getNString(i))+"\"";
	          break;
	     case $.db.types.TINYINT:
	     case $.db.types.SMALLINT:
	     case $.db.types.INT:
	     case $.db.types.BIGINT:
	          value += rs.getInteger(i);
	          break;
	     case $.db.types.DOUBLE:
	          value += rs.getDouble(i);
	          break;
	     case $.db.types.DECIMAL:
	          value += rs.getDecimal(i);
	          break;
	     case $.db.types.REAL:
	          value += rs.getReal(i);
	          break;
	     case $.db.types.NCLOB:
	     case $.db.types.TEXT:
	          value += "\""+ escapeSpecialChars(rs.getNClob(i))+"\"";
	          break;
	     case $.db.types.CLOB:
	          value += "\""+ escapeSpecialChars(rs.getClob(i))+"\"";
	          break;	          
	     case $.db.types.BLOB:
	    	  value += "\""+ $.util.convert.encodeBase64(rs.getBlob(i))+"\"";
	          break;	          
	     case $.db.types.DATE:
	    	 var dateTemp = new Date();
	    	 dateTemp.setDate(rs.getDate(i));
	    	 var dateString = dateTemp.toJSON();
	         value += "\""+dateString+"\"";
	          break;
	     case $.db.types.TIME:
	    	 var dateTemp = new Date();
	    	 dateTemp.setDate(rs.getTime(i));
	    	 var dateString = dateTemp.toJSON();
	         value += "\""+dateString+"\"";
	          break;
         case $.db.types.TIMESTAMP:
             var dateTemp = new Date();
             dateTemp.setDate(rs.getTimestamp(i));
             var dateString = dateTemp.toJSON();
             value += "\""+dateString+"\"";
             break;
	     case $.db.types.SECONDDATE:
	    	 var dateTemp = new Date();
	    	 dateTemp.setDate(rs.getSeconddate(i));
	    	 var dateString = dateTemp.toJSON();
	         value += "\""+dateString+"\"";
	          break;
	     default:
	          value += "\""+escapeSpecialChars(rs.getString(i))+"\"";
	     }
	     values.push(value);
	     }
	   table.push("{"+values+"}");
	}
	return 	JSON.parse("{\""+ rsName +"\" : [" + table	+"]}");

}

/**
@function Exception Object for variable lookup
@param {string} source - source function
@param {string} name - session variable name
@param {string} application - application name/id
@param {string} sessionId - Session ID
@returns {String} Error String
*/
function variableException(source, name,application,sessionId){
	this.source = source;
	this.name = name;
	this.application = application;
	this.sessionId = sessionId;
	this.message = "Invalid Variable ";
	
	this.toString = function() {
		return this.message + "name: " + this.name + " application: " + this.application + "session id: " + this.sessionId + " function: " + this.source;
	};
}

/**
@function Returns a session variable value
@param {string} name - session variable name
@param {string} application - application name/id
@returns {String} The NCLOB value stored in the session variable
*/
function get_session_variable(name, application){
	var sessionId = getSessionId();
	var output = "";
	var connection = $.hdb.getConnection();

	var ServerCookiesWrapper = connection.loadProcedure( 
		"ServerCookiesWrapper");

	var results = ServerCookiesWrapper("GET_SESSION_VAR", sessionId, name, application, new Date(), null);
	if(typeof results.SVARIABLE[0] !== "undefined"){
		output = results.SVARIABLE[0].DATA;		
		connection.commit();
		connection.close();
		return output;
	} else {	
		throw new variableException("get_session_variable", name, application, sessionId);
	}
}

/**
@function Returns all session variable values for an application
@param {string} application - application name/id
@returns {object} A JSON object of all values stored in the session variables for this application
*/
function get_session_variables(application){
	var sessionId = getSessionId();
	var connection = $.hdb.getConnection();
	var ServerCookiesWrapper = connection.loadProcedure( 
		"ServerCookiesWrapper");

	var results = ServerCookiesWrapper("GET_SESSION_VARS", sessionId, null, application, new Date(), null);
	var jsonOut = results.SVARIABLES;

	connection.commit();
	connection.close();
	return jsonOut;	
}

/**
@function Sets a session variable value
@param {string} name - session variable name
@param {string} application - application name/id
@param {any} value - any variable or object - will be converted to string
@param {optional date} expiry - expiry date/time for the variable defaults to 24 hours
@returns {boolean} successful?
*/
function set_session_variable(name, application, value, expiry){
	var sessionId = getSessionId();
	expiry = typeof expiry !== "undefined" ? expiry : calcTomorrow();
	
	var connection = $.hdb.getConnection();
	var ServerCookiesWrapper = connection.loadProcedure( 
		"ServerCookiesWrapper");
	ServerCookiesWrapper("SET_SESSION_VAR", sessionId, name, application, expiry, value.toString());
	
	connection.commit();
	connection.close();		
}

/**
@function Returns an application variable value
@param {string} name - session variable name
@param {string} application - application name/id
@returns {String} The NCLOB value stored in the session variable
*/
function get_application_variable(name, application){
	var connection = $.hdb.getConnection();
	var ServerCookiesWrapper = connection.loadProcedure( 
		"ServerCookiesWrapper");
	var output = "";	
	
	var results = ServerCookiesWrapper("GET_APP_VAR", null, name, application, new Date(), null);
	if(typeof results.SVARIABLE[0] !== "undefined"){
		output = results.SVARIABLE[0].DATA;		
		connection.commit();
		connection.close();
		return output;
	} else {	
		throw new variableException("get_application_variable", name, application);
	}
}

/**
@function Returns all applications variable values 
@param {string} application - application name/id
@returns {object} A JSON object of all values stored in the session variables for this application
*/
function get_application_variables(application){
	var connection = $.hdb.getConnection();
	var ServerCookiesWrapper = connection.loadProcedure( 
		"ServerCookiesWrapper");
	var results = ServerCookiesWrapper("GET_APP_VARS", null, null, application,  new Date(), null);
	var jsonOut = results.SVARIABLES;

	connection.commit();
	connection.close();
	return jsonOut;
}

/**
@function Sets an application variable value
@param {string} name - session variable name
@param {string} application - application name/id
@param {any} value - any variable or object - will be converted to string
@param {optional date} expiry - expiry date/time for the variable defaults to 24 hours
@returns {boolean} successful?
*/
function set_application_variable(name, application, value, expiry){
	expiry = typeof expiry !== "undefined" ? expiry : calcTomorrow();
	
	var connection = $.hdb.getConnection();
	var ServerCookiesWrapper = connection.loadProcedure( 
		"ServerCookiesWrapper");
	ServerCookiesWrapper("SET_APP_VAR", null, name, application, expiry, value.toString());
	
	connection.commit();
	connection.close();	
}
